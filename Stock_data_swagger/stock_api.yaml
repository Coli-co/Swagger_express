swagger: "2.0"
info:
  title: Top 20 Securities by Trading Volume
  description: "This is one day top 20 Securities by trading volume. You can find out more about data at [TWSE](https://www.twse.com.tw/zh/page/trading/exchange/MI_INDEX20.html). For this sample, you can use the api key to test the results."
  version: "1.0"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

schemes: [http, https]

tags:
  - name: Overall
    description: Main part of stock data
    externalDocs:
      description: Find out more
      url: "https://www.twse.com.tw/zh/"
  - name: Rank
    description: Operations about stock data by rank
    externalDocs:
      description: Find out more
      url: "https://www.twse.com.tw/zh/"
  - name: Stock Code
    description: Operations about stock data by stock code
    externalDocs:
      description: Find out more
      url: "https://www.twse.com.tw/zh/"

paths:
  # Return all data (get)
  /stock:
    get:
      tags:
        - Overall
      summary: All rank of stock.
      description: Return all data of stock.
      responses:
        200:
          description: Success
          schema:
            $ref: "#demo"

  #  Return stock data by rank (get, post, put)
  /stock/{rank}:
    # Get data
    get:
      tags:
        - Rank
      summary: Find stock by rank
      description: Return single array of stock
      parameters:
        - name: "排名"
          in: path
          description: Rank of stock data to return
          required: true
          $ref: "#/definitions/Rank"

      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Stock"
        400:
          description: "Invalid rank supplied"
        404:
          description: "Stock not found"
    # Post data
    post:
      tags:
        - Rank
      summary: Update stock data by rank
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: path
          name: "排名"
          description: Rank of stock that needs to be updated.
          required: true
          $ref: "#/definitions/Rank"
        - name: "證券代號"
          in: formData
          description: Update data of the stock code.
          type: string
          $ref: "#/definitions/StockCode"
        - name: "證券名稱"
          in: formData
          description: Update data of the stock name.
          type: string
          $ref: "#/definitions/StockName"
      responses:
        200:
          description: OK
        405:
          description: "Invalid input"
    # Put data
    put:
      tags:
        - Rank
      summary: Update existing stock data by rank
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "排名"
          in: path
          description: Rank that needs to be updated.
          required: true
          type: integer
          $ref: "#/definitions/Rank"
        - name: body
          in: body
          description: Updated stock object
          required: true
          schema:
            $ref: "#/definitions/EachStock"
      responses:
        200:
          description: OK
        400:
          description: "Invalid rank supplied"
        404:
          description: "Stock not found"
        405:
          description: "Validation exception"
    # Delete data
    delete:
      tags:
        - Rank
      summary: Delete stock data by rank
      description:
      produces:
        - application/json
        - application/xml
      parameters:
        - name: "排名"
          in: path
          description: Rank to delete
          type: integer
          required: true
          $ref: "#/definitions/Rank"
      responses:
        400:
          description: "Invalid rank supplied"
        404:
          description: "Stock not found"

  # Return stock data by stock code (get, post, put, delete)
  /stock/{stockCode}:
    # Get data
    get:
      tags:
        - Stock Code
      summary: Find stock by stock code
      description: Return single array of stock
      parameters:
        - name: "證券代號"
          in: path
          description: Rank of stock code to return
          required: true
          $ref: "#/definitions/StockCode"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Stock"
        400:
          description: "Invalid stock code supplied"
        404:
          description: "Stock code not found"
    # Post data
    post:
      tags:
        - Stock Code
      summary: Update stock data by stock code
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "排名"
          in: path
          description: Rank of stock that needs to be updated.
          type: integer
          $ref: "#/definitions/Rank"
        - name: "證券代號"
          in: formData
          description: Update data of the stock code.
          required: true
          $ref: "#/definitions/StockCode"
        - name: "證券名稱"
          in: formData
          description: Update data of the stock name.
          $ref: "#/definitions/StockName"
      responses:
        200:
          description: OK
        405:
          description: "Invalid input"
    # Put data
    put:
      tags:
        - Stock Code
      summary: Update existing stock data by stock code
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "證券代號"
          in: path
          description: Stock code that needs to be updated.
          required: true
          $ref: "#/definitions/StockCode"
        - name: body
          in: body
          description: Updated stock object
          required: true
          schema:
            $ref: "#/definitions/EachStock"
      responses:
        200:
          description: OK
        400:
          description: "Invalid stock code supplied"
        404:
          description: "Stock not found"
        405:
          description: "Validation exception"
    # Delete data
    delete:
      tags:
        - Stock Code
      summary: Delete stock data
      description:
      produces:
        - application/json
        - application/xml
      parameters:
        - name: "證券代號"
          in: path
          description: stock code to delete
          required: true
          $ref: "#/definitions/StockCode"
      responses:
        400:
          description: "Invalid stock code supplied"
        404:
          description: "Stock not found"

  # Add a new stock data (post)
  /stock/create:
    post:
      tags:
        - Overall
      summary: Add a new stock data.
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: body
          name: body
          description: Stock object that needs to be added.
          required: true
          schema:
            $ref: "#/definitions/EachStock"
      responses:
        200:
          description: OK
        405:
          description: "Invalid input"

demo:
  type: array
  items:
    type: object
    properties:
      "排名":
        type: integer
      "證券代號":
        type: string
      "證券名稱":
        type: string
      "成交股數":
        type: string
      "成交筆數":
        type: string
      "開盤價":
        type: string
      "最高價":
        type: string
      "最低價":
        type: string
      "收盤價":
        type: string
      "漲跌價差":
        type: string
      "最後揭示買價":
        type: string
      "最後揭示賣價":
        type: string
  example:
    [
      {
        "排名": 1,
        "證券代號": "00632R",
        "證券名稱": "元大台灣50反1",
        "成交股數": "182,725,585",
        "成交筆數": "6,953",
        "開盤價": "5.94",
        "最高價": "5.98",
        "最低價": "5.92",
        "收盤價": "5.93",
        "漲跌價差": "0.05",
        "最後揭示買價": "5.92",
        "最後揭示賣價": "5.93",
      },
    ]

definitions:
  Stock:
    type: array
    items:
      type: object
      properties:
        "排名":
          type: integer
          example: 1
        "證券代號":
          type: string
        "證券名稱":
          type: string
        "成交股數":
          type: string
        "成交筆數":
          type: string
        "開盤價":
          type: string
        "最高價":
          type: string
        "最低價":
          type: string
        "收盤價":
          type: string
        "漲跌價差":
          type: string
        "最後揭示買價":
          type: string
        "最後揭示賣價":
          type: string
  EachStock:
    type: object
    properties:
      "排名":
        type: integer
      "證券代號":
        type: string
      "證券名稱":
        type: string
      "成交股數":
        type: string
      "成交筆數":
        type: string
      "開盤價":
        type: string
      "最高價":
        type: string
      "最低價":
        type: string
      "收盤價":
        type: string
      "漲跌價差":
        type: string
      "最後揭示買價":
        type: string
      "最後揭示賣價":
        type: string
  Rank:
    name: "排名"
    in: path
    type: integer
    enum:
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
  StockCode:
    name: "證券代號"
    in: formData
    type: string
    enum:
      [
        "00632R",
        "00673R",
        "2609",
        "2610",
        "2409",
        "00715L",
        "3481",
        "2303",
        "2618",
        "3047",
        "2367",
        "6443",
        "00637L",
        "2330",
        "2888",
        "2890",
        "00878",
        "2834",
        "6235",
        "2498",
      ]
  StockName:
    name: "證券名稱"
    in: formData
    type: string
    enum:
      [
        "元大台灣50反1",
        "期元大S&P原油反1",
        "陽明",
        "華航",
        "友達",
        "期街口布蘭特正2",
        "群創",
        "聯電",
        "長榮航",
        "訊舟",
        "燿華",
        "元晶",
        "元大滬深300正2",
        "台積電",
        "新光金",
        "永豐金",
        "國泰永續高股息",
        "臺企銀",
        "華孚",
        "宏達電",
      ]
